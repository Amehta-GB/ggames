'use strict';

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _njm = require('./njm');

var _njm2 = _interopRequireDefault(_njm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.version(_package2.default.version);

_commander2.default.command('create <name>').description('create a new neo4j instance').option("-e, --edition <edition>", "Set the neo4j edition").option("-r, --release <release>", "Set the neo4j release version").option("-a, --address <address>", "Set the http address").option("-s, --ssl <ssl>", "Set the https address").option("-b, --bolt <bolt>", "Set bolt address").action((name, options) => {
  if (options.address) options.http = options.address;
  if (options.ssl) options.https = options.ssl;
  let { http, https, bolt, edition, release } = options;
  (0, _njm2.default)().create(name, { http, https, bolt, edition, release });
});

_commander2.default.command('stop [name]').description('create a new neo4j instance').action((name, options) => {
  (0, _njm2.default)().stop(name);
});

_commander2.default.command('start [name]').description('create a new neo4j instance').action((name, options) => {
  (0, _njm2.default)().start(name);
});

_commander2.default.command('stop [name]').description('create a new neo4j instance').action((name, options) => {
  (0, _njm2.default)().stop(name);
});

_commander2.default.command('restart [name]').description('create a new neo4j instance').action((name, options) => {
  (0, _njm2.default)().restart(name);
});

_commander2.default.command('destroy [name]').description('create a new neo4j instance').action((name, options) => {
  (0, _njm2.default)().destroy(name);
});

_commander2.default.parse(process.argv);