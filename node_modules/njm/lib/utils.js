'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.format = format;
exports.set = set;
exports.get = get;
exports.fetch = fetch;
exports.dirs = dirs;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _shelljs = require('shelljs');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(obj) {
  if ('string' !== typeof obj) {
    return Object.keys(obj).reduce((o, k) => {
      o[k] = parse(obj[k]);
      return o;
    }, {});
  }
  let parts = obj.replace(/.*?:\/\//g, '').split(':');
  return {
    host: parts[0],
    port: parseInt(parts[1], 10)
  };
}

function format(obj) {
  return Object.keys(obj).reduce((o, k) => {
    o[k] = `${ obj[k].host }:${ obj[k].port }`;
    return o;
  }, {});
}

function set(string, key, value) {
  if ('object' === typeof key) {
    return Object.keys(key).reduce((s, k) => set(s, k, key[k]), string);
  }
  let v = get(string, key);
  key = `dbms\.connector\.${ key }\.address`;
  let regex = new RegExp(`^#?[ \t]?${ key }=${ v }`, 'gm');
  return string.replace(regex, `${ key }=${ value }`);
}

function get(string, key) {
  if (!key) {
    return {
      bolt: get(string, 'bolt'),
      http: get(string, 'http'),
      https: get(string, 'https')
    };
  }
  key = `dbms\.connector\.${ key }\.address`;
  let regex = new RegExp(`${ key }=(.*)`, 'gm');
  let res = string.match(regex);
  if (!res || !res.length) return null;
  return res[0].replace(`${ key }=`, '');
}

function fetch(host, file, path) {
  if ((0, _shelljs.test)('-e', `${ path }/neo4j/${ file }`)) return;
  if ((0, _shelljs.which)('wget')) (0, _shelljs.exec)(`wget ${ host }/${ file } -O ${ path }/neo4j/${ file }`);else if ((0, _shelljs.which)('curl')) (0, _shelljs.exec)(`curl ${ host }/${ file } -o ${ path }/neo4j/${ file }`);else throw new Error('`curl` or `wget` required');
}

function dirs(path) {
  return _fs2.default.readdirSync(path).filter(file => _fs2.default.statSync(`${ path }/${ file }`).isDirectory());
}